pipeline {
    agent {
        label 'docker_build'
    }

    environment {
        FULL_DOCKER_IMAGE_NAME = 'thevirtualbrain/tvb-multiscale'
        TVB_BRANCH = 'master'
        MULTISCALE_BRANCH = 'master'
    }

    stages {
        stage('Build and push docker image on docker hub'){
            steps {
                script {
                    VERSION_NO = sh(script: "curl -s 'https://raw.githubusercontent.com/the-virtual-brain/tvb-multiscale/master/setup.py' | grep VERSION | head -1 | tr -d 'VERSION = \"'", returnStdout: true).trim()
                    LAST_SHA_TVB = sh (script: "curl -s 'https://api.github.com/repos/the-virtual-brain/tvb-root/commits?sha=${TVB_BRANCH}' | grep sha | head -1 | tr '\"' '_'", returnStdout: true).trim()
                    LAST_SHA_MULTISCALE = sh (script: "curl -s 'https://api.github.com/repos/the-virtual-brain/tvb-multiscale/commits?sha=${MULTISCALE_BRANCH}' | grep sha | head -1 | cut -d ':' -f2 | tr -d '\",'", returnStdout: true).trim()
                    VERSION_TAG = "${VERSION_NO}-${LAST_SHA_MULTISCALE}"
                    withDockerRegistry(credentialsId: 'tvb_on_docker_hub') {
                        def dockerfile = 'docker/hbp_deploy/Dockerfile'
                        def dockerImage = docker.build("${FULL_DOCKER_IMAGE_NAME}:${VERSION_TAG}", "--build-arg TVB_BRANCH='${TVB_BRANCH}' --build-arg MULTISCALE_BRANCH='${MULTISCALE_BRANCH}' --build-arg LAST_SHA_TVB='${LAST_SHA_TVB}' --build-arg LAST_SHA_MULTISCALE='${LAST_SHA_MULTISCALE}' -f ${dockerfile} .")
                        dockerImage.push()
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }

    post {
        changed {
            mail to: 'paula.prodan@codemart.ro lia.domide@codemart.ro',
            subject: "Jenkins Pipeline ${currentBuild.fullDisplayName} changed status",
            body: """
                Result: ${currentBuild.result}
                Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'
                Check console output at ${env.BUILD_URL}"""
        }

        success {
            echo 'Build finished successfully'
        }
    }
}
